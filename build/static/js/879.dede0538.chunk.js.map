{"version":3,"file":"static/js/879.dede0538.chunk.js","mappings":"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","sources":["action/ui_actions.js","components/inputs/InputTableTextControl.js","pages/dashboard/change_email/components/schema/Schema.js","pages/dashboard/change_email/components/sections/VerificationSection.js","pages/dashboard/change_email/components/sections/ChangeEmailSection.js","pages/dashboard/change_email/ChangeEmail.js","utils/functions.js"],"sourcesContent":["import actionType from \"./ui_action_types\"\n\nexport const updateSidebarShow = (param) => {\n    return {\n        type: actionType.SIDEBAR_SHOW,\n        payload: param,\n    }\n}\n\nexport const setInsuranceDetails = (param) => {\n    return {\n        type: actionType.SET_INSURANCE_DETAILS,\n        payload: param,\n    }\n}\n\nexport const setSelectedInsurance = (param) => {\n    return {\n        type: actionType.SET_SELECTED_INSURANCE,\n        payload: param,\n    }\n}\n\nexport const setInsuranceRateDetails = (param) => {\n    return {\n        type: actionType.SET_INSURANCE_RATE_DETAILS,\n        payload: param,\n    }\n}\n\nexport const setInsurance = (param) => {\n    return {\n        type: actionType.SET_INSURANCES,\n        payload: param,\n    }\n}\n\nexport const setWatchInsuranceCoverage = (param) => {\n    return {\n        type: actionType.SET_WATCH_INSURANCE_COVERAGE,\n        payload: param,\n    }\n}\n\nexport const setIsSpouse = (param) => {\n    return {\n        type: actionType.SET_IS_SPOUSE,\n        payload: param,\n    }\n}\n\nexport const setErrorCodeConfirmData = (param) => {\n    return {\n        type: actionType.SET_ERROR_CODE_CONFIRM_DATA,\n        payload: param,\n    }\n}\n\nexport const setCodeConfirmSuccess = (param) => {\n    return {\n        type: actionType.SET_CODE_CONFIRM_SUCCESS,\n        payload: param,\n    }\n}\n\nexport const setErrorNewCodeConfirmData = (param) => {\n    return {\n        type: actionType.SET_ERROR_NEW_CODE_CONFIRM_DATA,\n        payload: param,\n    }\n}\n\nexport const setNewCodeConfirmSuccess = (param) => {\n    return {\n        type: actionType.SET_NEW_CODE_CONFIRM_SUCCESS,\n        payload: param,\n    }\n}\n\nexport const setNewCodeSentSuccess = (param) => {\n    return {\n        type: actionType.SET_NEW_CODE_SENT_SUCCESS,\n        payload: param,\n    }\n}\n\nexport const setCodeSentSuccess = (param) => {\n    return {\n        type: actionType.SET_CODE_SENT_SUCCESS,\n        payload: param,\n    }\n}\n\nexport const setErrorCodeSentData = (param) => {\n    return {\n        type: actionType.SET_ERROR_CODE_SENT_DATA,\n        payload: param,\n    }\n}\n\nexport const setResendVerificationEmail = (param) => {\n    return {\n        type: actionType.SET_RESEND_EMAIL_VERIFICATION,\n        payload: param,\n    }\n}","import React from \"react\"\nimport { styled } from \"@mui/material/styles\"\nimport TextField from \"@mui/material/TextField\"\nimport { Controller } from \"react-hook-form\"\n\nimport { NumberFormatter, NumberFormatterLeadingZeros } from \"src/utils/functions\"\n\nconst InputTableTextControl = styled(\n    ({ control, name, label, defaultValue, number, onBlur, leadingZeros, ...props }) => (\n        <>\n            <Controller\n                control={control}\n                name={name}\n                defaultValue={defaultValue || \"\"}\n                render={({ field: { onChange, value }, fieldState: { invalid, error } }) => (\n                    <TextField\n                        required\n                        fullWidth\n                        label={label}\n                        size=\"small\"\n                        onChange={onChange}\n                        onBlur={onBlur}\n                        value={value}\n                        error={invalid}\n                        helperText={error?.message || \" \"}\n                        InputLabelProps={{\n                            style: {\n                                color: \"#CCCCCC\",\n                            },\n                        }}\n                        InputProps={{\n                            inputComponent: number\n                                ? leadingZeros\n                                    ? NumberFormatterLeadingZeros\n                                    : NumberFormatter\n                                : null,\n                            // autoComplete: \"off\",\n                        }}\n                        FormHelperTextProps={{\n                            className: \"mt-0\",\n                        }}\n                        multiline\n                        {...props}\n                    />\n                )}\n            />\n        </>\n    ),\n)(({ theme }) => ({\n    \".MuiInputLabel-root.Mui-error\": {\n        color: \"rgb(239, 83, 80) !important\",\n    },\n    \".MuiInputLabel-shrink.Mui-focused.Mui-error\": {\n        color: \"rgb(239, 83, 80) !important\",\n    },\n    \".MuiInputLabel-shrink.Mui-focused\": {\n        color: \"#009C99 !important\",\n    },\n    \".MuiOutlinedInput-notchedOutline\": {\n        transition: \"0.3s\",\n        legend: {\n            float: \"unset\",\n            overflow: \"hidden\",\n            display: \"block\",\n            width: \"auto\",\n            padding: 0,\n            height: \"11px\",\n            fontSize: \"0.75em\",\n            visibility: \"hidden\",\n            transition: \"max-width 100ms cubic-bezier(0.0, 0, 0.2, 1) 50ms\",\n            whiteSpace: \"nowrap\",\n        },\n    },\n}))\n\nexport default InputTableTextControl\n","import * as yup from \"yup\"\n\nconst VerificationCodeSchema = yup\n    .object()\n    .shape({\n        verifyCode: yup.string().required(\"Field is required.\"),\n    })\n    .required()\n\nconst NewEmailSchema = yup\n    .object()\n    .shape({\n        newEmail: yup.string().required(\"Field is required.\"),\n        confirmationCode: yup.string(),\n    })\n    .required()\n\nexport { VerificationCodeSchema, NewEmailSchema }\n","import React, { useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport { useForm } from \"react-hook-form\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { useNavigate } from \"react-router-dom\"\nimport Button from \"@mui/material/Button\"\nimport Grid from \"@mui/material/Grid\"\nimport Box from \"@mui/material/Box\"\nimport Typography from \"@mui/material/Typography\"\n\nimport { VerificationCodeSchema } from \"src/pages/dashboard/change_email/components/schema/Schema\"\nimport InputTableTextControl from \"src/components/inputs/InputTableTextControl\"\nimport {\n    doSendCurrentEmailVerificationCode,\n    doConfirmCurrentEmailVerificationCode,\n} from \"src/action/api_actions\"\nimport { setErrorCodeConfirmData, setCodeConfirmSuccess } from \"src/action/ui_actions\"\n\nexport const VerificationSection = ({\n    setCodeConfirmSuccess,\n    setErrorCodeConfirmData,\n    doConfirmCurrentEmailVerificationCode,\n    doSendCurrentEmailVerificationCode,\n    setIsVerifiedEmail,\n    loggedInUser,\n    errorCodeConfirmData,\n    codeConfirmSuccess,\n}) => {\n    const navigate = useNavigate()\n    const { control, handleSubmit, trigger, getValues, setValue, setError, reset } = useForm({\n        defaultValues: {\n            verifyCode: \"\",\n        },\n        resolver: yupResolver(VerificationCodeSchema),\n        mode: \"all\",\n    })\n\n    useEffect(() => {\n        reset()\n    }, [])\n\n    useEffect(() => {\n        if (codeConfirmSuccess) {\n            setIsVerifiedEmail(true)\n        }\n    }, [codeConfirmSuccess])\n\n    useEffect(() => {\n        if (errorCodeConfirmData) {\n            setError(\"verifyCode\", { type: \"custom\", message: errorCodeConfirmData })\n        }\n    }, [errorCodeConfirmData])\n\n    const handleReSend = () => {\n        doSendCurrentEmailVerificationCode()\n    }\n\n    const handleContinue = () => {\n        setErrorCodeConfirmData(null)\n        setCodeConfirmSuccess(null)\n        const verifyCode = getValues(\"verifyCode\")\n        doConfirmCurrentEmailVerificationCode({ verify_code: verifyCode })\n    }\n\n    const handleCancel = () => {\n        navigate(\"/dashboard/my-profile\")\n    }\n\n    return (\n        <>\n            <Box\n                sx={{ p: 2, border: \"1px solid rgb(42, 74, 75)\", borderRadius: \"4px\" }}\n                className=\"mb-5\"\n            >\n                <Typography\n                    variant=\"subtitle1\"\n                    component=\"div\"\n                    color=\"text.secondary\"\n                    className=\"mb-2\"\n                >\n                    A verification code was sent to{\" \"}\n                    <Typography variant=\"body1\" component=\"span\">\n                        <b>{loggedInUser?.customer?.email}</b>\n                    </Typography>\n                </Typography>\n\n                <Typography\n                    variant=\"caption\"\n                    color=\"text.secondary\"\n                    component=\"div\"\n                    className=\"mb-2 lh-sm\"\n                >\n                    Enter the account verification code you received. (It could take up to 5 minutes\n                    for an account verification code to be delivered.)\n                </Typography>\n\n                <Grid container columns={{ xs: 1, lg: 12 }}>\n                    <Grid item xs={1} lg={3} className=\"pt-0 mb-3\">\n                        <InputTableTextControl\n                            control={control}\n                            name=\"verifyCode\"\n                            label=\"Verification Code\"\n                        />\n                    </Grid>\n                </Grid>\n\n                <Button disableElevation variant=\"contained\" onClick={handleSubmit(handleContinue)}>\n                    Continue\n                </Button>\n            </Box>\n\n            <Typography variant=\"subtitle2\" className=\"mb-2\">\n                Having trouble receiving an account verification code?\n            </Typography>\n\n            <Box className=\"d-flex justify-content-between\">\n                <Button disableElevation variant=\"contained\" onClick={handleReSend}>\n                    Resend account verification code\n                </Button>\n\n                <Button disableElevation variant=\"outlined\" onClick={handleCancel}>\n                    Cancel\n                </Button>\n            </Box>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    loggedInUser: state.core.loggedInUser,\n    errorCodeConfirmData: state.userProfile.errorCodeConfirmData,\n    codeConfirmSuccess: state.userProfile.codeConfirmSuccess,\n})\n\nconst mapDispatchToProps = {\n    doConfirmCurrentEmailVerificationCode,\n    doSendCurrentEmailVerificationCode,\n    setErrorCodeConfirmData,\n    setCodeConfirmSuccess,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VerificationSection)\n","import React, { useState, useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport { useForm } from \"react-hook-form\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { useNavigate } from \"react-router-dom\"\nimport Grid from \"@mui/material/Grid\"\nimport Box from \"@mui/material/Box\"\nimport Typography from \"@mui/material/Typography\"\nimport Button from \"@mui/material/Button\"\n\nimport { NewEmailSchema } from \"src/pages/dashboard/change_email/components/schema/Schema\"\nimport InputTableTextControl from \"src/components/inputs/InputTableTextControl\"\nimport {\n    doSendNewEmailVerificationCode,\n    doConfirmNewEmailVerificationCode,\n    doGetLoggedInUser,\n} from \"src/action/api_actions\"\nimport {\n    setErrorNewCodeConfirmData,\n    setNewCodeConfirmSuccess,\n    setNewCodeSentSuccess,\n} from \"src/action/ui_actions\"\n\nexport const ChangeEmailSection = ({\n    setNewCodeSentSuccess,\n    setNewCodeConfirmSuccess,\n    setErrorNewCodeConfirmData,\n    doSendNewEmailVerificationCode,\n    doConfirmNewEmailVerificationCode,\n    doGetLoggedInUser,\n    loggedInUser,\n    newCodeSentSuccess,\n    newCodeConfirmSuccess,\n    errorNewCodeSentData,\n    errorNewCodeConfirmData,\n}) => {\n    const navigate = useNavigate()\n    const { control, handleSubmit, trigger, getValues, setValue, setError, resetField } = useForm({\n        resolver: yupResolver(NewEmailSchema),\n        mode: \"all\",\n    })\n\n    useEffect(() => {\n        // console.log(\"[newCodeConfirmSuccess]\", newCodeConfirmSuccess)\n    }, [newCodeConfirmSuccess])\n\n    useEffect(() => {\n        if (errorNewCodeSentData) {\n            setError(\"newEmail\", { type: \"custom\", message: errorNewCodeSentData })\n        }\n    }, [errorNewCodeSentData])\n\n    useEffect(() => {\n        if (errorNewCodeConfirmData) {\n            setError(\"confirmationCode\", { type: \"custom\", message: errorNewCodeConfirmData })\n        }\n    }, [errorNewCodeConfirmData])\n\n    const handleChangeEmail = () => {\n        setErrorNewCodeConfirmData(null)\n        const newEmail = getValues(\"newEmail\")\n        doSendNewEmailVerificationCode({ new_email: newEmail })\n    }\n\n    const handleConfirmChangeEmail = () => {\n        const newEmail = getValues(\"newEmail\")\n        const confirmationCode = getValues(\"confirmationCode\")\n        doConfirmNewEmailVerificationCode({ verify_code: confirmationCode, new_email: newEmail })\n    }\n\n    const handleContinue = () => {\n        setNewCodeSentSuccess(false)\n        setNewCodeConfirmSuccess(false)\n        doGetLoggedInUser()\n        navigate(\"/dashboard/my-profile\")\n    }\n\n    return (\n        <>\n            <Box\n                // sx={{ p: 2, border: \"1px solid rgb(42, 74, 75)\", borderRadius: \"4px\" }}\n                className=\"mb-5\"\n            >\n                {!newCodeConfirmSuccess && (\n                    <>\n                        <Typography variant=\"body2\" component=\"div\" className=\"mb-2\">\n                            Current Email Address {\" : \"} {<b>{loggedInUser?.customer?.email}</b>}\n                        </Typography>\n                        <Grid container columns={{ xs: 1, lg: 12 }}>\n                            <Grid item xs={1} lg={3} className=\"pt-0\">\n                                <InputTableTextControl\n                                    control={control}\n                                    name=\"newEmail\"\n                                    label=\"New Email Address\"\n                                    disabled={newCodeSentSuccess}\n                                />\n                            </Grid>\n                        </Grid>\n                    </>\n                )}\n                {newCodeSentSuccess && !newCodeConfirmSuccess && (\n                    <>\n                        <Typography variant=\"caption\" component=\"div\" className=\"mb-2\">\n                            Enter the code we sent to vour new email address\n                        </Typography>\n                        <Grid container columns={{ xs: 1, lg: 12 }}>\n                            <Grid item xs={1} lg={3} className=\"pt-0\">\n                                <InputTableTextControl\n                                    control={control}\n                                    name=\"confirmationCode\"\n                                    label=\"Confirmation Code\"\n                                />\n                            </Grid>\n                        </Grid>\n                    </>\n                )}\n\n                {!newCodeSentSuccess && (\n                    <Button\n                        disableElevation\n                        variant=\"contained\"\n                        onClick={handleSubmit(handleChangeEmail)}\n                        className=\"mt-3\"\n                    >\n                        Change Email\n                    </Button>\n                )}\n\n                {newCodeSentSuccess && !newCodeConfirmSuccess && (\n                    <Button\n                        disableElevation\n                        variant=\"contained\"\n                        onClick={handleConfirmChangeEmail}\n                        className=\"mt-3\"\n                    >\n                        Confirm Change Email\n                    </Button>\n                )}\n\n                {newCodeConfirmSuccess && (\n                    <Box>\n                        <Typography variant=\"subtitle1\" component=\"div\">\n                            Your email address has been updated\n                        </Typography>\n                        <Typography variant=\"caption\" component=\"div\" color=\"text.secondary\">\n                            Please login with your email address\n                        </Typography>\n                        <Button\n                            disableElevation\n                            variant=\"contained\"\n                            className=\"mt-3\"\n                            onClick={handleContinue}\n                        >\n                            Continue\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    loggedInUser: state.core.loggedInUser,\n    newCodeSentSuccess: state.userProfile.newCodeSentSuccess,\n    newCodeConfirmSuccess: state.userProfile.newCodeConfirmSuccess,\n    errorNewCodeSentData: state.userProfile.errorNewCodeSentData,\n    errorNewCodeConfirmData: state.userProfile.errorNewCodeConfirmData,\n})\n\nconst mapDispatchToProps = {\n    doSendNewEmailVerificationCode,\n    setErrorNewCodeConfirmData,\n    doConfirmNewEmailVerificationCode,\n    doGetLoggedInUser,\n    setNewCodeConfirmSuccess,\n    setNewCodeSentSuccess,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangeEmailSection)\n","import React, { useState, useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport Box from \"@mui/material/Box\"\nimport Card from \"@mui/material/Card\"\nimport CardContent from \"@mui/material/CardContent\"\nimport Typography from \"@mui/material/Typography\"\n\nimport VerificationSection from \"src/pages/dashboard/change_email/components/sections/VerificationSection\"\nimport ChangeEmailSection from \"src/pages/dashboard/change_email/components/sections/ChangeEmailSection\"\n\nexport const ChangeEmail = () => {\n    const [isVerifiedEmail, setIsVerifiedEmail] = useState(false)\n\n    useEffect(() => {\n        setIsVerifiedEmail(false)\n    }, [])\n\n    return (\n        <Box>\n            <Card variant=\"outlined\">\n                <CardContent>\n                    <Typography variant=\"h6\" className=\"mb-3\">\n                        Change Email\n                    </Typography>\n\n                    {!isVerifiedEmail && (\n                        <VerificationSection setIsVerifiedEmail={setIsVerifiedEmail} />\n                    )}\n\n                    {isVerifiedEmail && <ChangeEmailSection />}\n                </CardContent>\n            </Card>\n        </Box>\n    )\n}\n\nconst mapStateToProps = (state) => ({})\n\nconst mapDispatchToProps = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangeEmail)\n","import React from \"react\"\nimport NumberFormat from \"react-number-format\"\nimport { useMediaQuery } from \"react-responsive\"\n\nexport const NumberFormatterLeadingZeros = React.forwardRef(function NumberFormatCustom(\n    props,\n    ref,\n) {\n    const { onChange, name, ...other } = props\n\n    return (\n        <NumberFormat\n            {...other}\n            allowLeadingZeros\n            allowNegative={false}\n            decimalSeparator={false}\n            getInputRef={ref}\n            onValueChange={(values) => {\n                onChange({\n                    target: {\n                        name: name,\n                        value: values.value,\n                    },\n                })\n            }}\n        />\n    )\n})\n\nexport const NumberFormatter = React.forwardRef(function NumberFormatCustom(props, ref) {\n    const { onChange, name, ...other } = props\n\n    return (\n        <NumberFormat\n            {...other}\n            allowNegative={false}\n            getInputRef={ref}\n            onValueChange={(values) => {\n                onChange({\n                    target: {\n                        name: name,\n                        value: values.value,\n                    },\n                })\n            }}\n        />\n    )\n})\n\nexport const DesktopView = ({ children }) => {\n    const isDesktop = useMediaQuery({ minWidth: 992 })\n    return isDesktop ? children : null\n}\n\nexport const TabletView = ({ children }) => {\n    const isTablet = useMediaQuery({ minWidth: 768, maxWidth: 991 })\n    return isTablet ? children : null\n}\n\nexport const DefaultView = ({ children }) => {\n    const isNotMobile = useMediaQuery({ minWidth: 768 })\n    return isNotMobile ? children : null\n}\n\nexport const MobilePortraitView = ({ children }) => {\n    const isMobile = useMediaQuery({ maxWidth: 767 })\n\n    return isMobile ? children : null\n}"],"names":["setInsuranceDetails","param","type","actionType","payload","setSelectedInsurance","setInsuranceRateDetails","setWatchInsuranceCoverage","setIsSpouse","setErrorCodeConfirmData","setCodeConfirmSuccess","setErrorNewCodeConfirmData","setNewCodeConfirmSuccess","setNewCodeSentSuccess","setCodeSentSuccess","setErrorCodeSentData","setResendVerificationEmail","InputTableTextControl","styled","control","name","label","defaultValue","number","onBlur","leadingZeros","props","render","field","onChange","value","fieldState","invalid","error","required","fullWidth","size","helperText","message","InputLabelProps","style","color","InputProps","inputComponent","NumberFormatterLeadingZeros","NumberFormatter","FormHelperTextProps","className","multiline","theme","transition","legend","float","overflow","display","width","padding","height","fontSize","visibility","whiteSpace","VerificationCodeSchema","yup","shape","verifyCode","NewEmailSchema","newEmail","confirmationCode","mapDispatchToProps","doConfirmCurrentEmailVerificationCode","doSendCurrentEmailVerificationCode","connect","state","loggedInUser","core","errorCodeConfirmData","userProfile","codeConfirmSuccess","setIsVerifiedEmail","navigate","useNavigate","useForm","defaultValues","resolver","yupResolver","mode","handleSubmit","getValues","trigger","setError","setValue","reset","useEffect","Box","sx","p","border","borderRadius","Typography","variant","component","customer","email","Grid","container","columns","xs","lg","item","Button","disableElevation","onClick","verify_code","doSendNewEmailVerificationCode","doConfirmNewEmailVerificationCode","doGetLoggedInUser","newCodeSentSuccess","newCodeConfirmSuccess","errorNewCodeSentData","errorNewCodeConfirmData","resetField","disabled","new_email","ChangeEmail","useState","isVerifiedEmail","Card","CardContent","React","ref","other","allowLeadingZeros","allowNegative","decimalSeparator","getInputRef","onValueChange","values","target","DesktopView","children","useMediaQuery","minWidth","TabletView","maxWidth","MobilePortraitView"],"sourceRoot":""}